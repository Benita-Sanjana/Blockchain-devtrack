<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ethereum Lending Pool</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            width: 400px;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        .logo {
            width: 100px;
            height: 100px;
            background-color: #007bff;
            color: #fff;
            font-size: 1.5em;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 50%;
            margin: 0 auto 20px;
            font-weight: bold;
        }
        .nav-links {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
        }
        .nav-links a {
            text-decoration: none;
            color: #007bff;
            font-weight: bold;
        }
        h1 {
            font-size: 1.5em;
            color: #333;
            margin-bottom: 20px;
        }
        .balance-display, .transaction-history {
            margin-bottom: 20px;
            font-size: 0.9em;
            color: #333;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            font-size: 0.9em;
            color: #333;
            margin-bottom: 5px;
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            font-size: 1em;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            width: 100%;
            padding: 10px;
            font-size: 1em;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
        }
        button:hover {
            background-color: #0056b3;
        }
        #result {
            margin-top: 20px;
            font-size: 0.9em;
            color: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">Blockchain</div>
        <div class="nav-links">
            <a href="#">Home</a>
            <a href="#">Sign In</a>
            <a href="#">Contact Us</a>
            <a href="#">About Us</a>
        </div>
        <h1>Ethereum Lending Pool</h1>
        <div class="balance-display" id="balanceDisplay">Balance: Loading...</div>
        <div class="form-group">
            <label for="depositAmount">Deposit Amount (ETH):</label>
            <input type="number" id="depositAmount" step="0.01" min="0.01" placeholder="Enter amount in ETH">
            <button onclick="deposit()">Deposit</button>
        </div>
        <div class="form-group">
            <label for="borrowAmount">Borrow Amount (ETH):</label>
            <input type="number" id="borrowAmount" step="0.01" min="0.01" placeholder="Enter amount in ETH">
            <button onclick="borrow()">Borrow</button>
        </div>
        <div class="form-group">
            <label for="repayAmount">Repay Amount (ETH):</label>
            <input type="number" id="repayAmount" step="0.01" min="0.01" placeholder="Enter amount in ETH">
            <button onclick="repay()">Repay</button>
        </div>
        <div class="form-group">
            <label for="withdrawAmount">Withdraw Amount (ETH):</label>
            <input type="number" id="withdrawAmount" step="0.01" min="0.01" placeholder="Enter amount in ETH">
            <button onclick="withdraw()">Withdraw</button>
        </div>
        <div id="result"></div>
        <div class="transaction-history">
            <h2>Transaction History</h2>
            <ul id="transactionHistory"></ul>
        </div>
    </div>

    <script>
        const API_URL = "http://localhost:3000";

        async function handleRequest(endpoint, data) {
            try {
                const response = await fetch(`${API_URL}/${endpoint}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(data),
                });
                const result = await response.json();
                displayResult(result);
                if (result.txHash) addTransactionHistory(endpoint, data.amount, result.txHash);
                updateBalance();
            } catch (error) {
                displayResult({ error: error.message });
            }
        }

        function deposit() {
            const amount = document.getElementById("depositAmount").value;
            if (validateAmount(amount)) handleRequest("deposit", { amount });
        }

        function borrow() {
            const amount = document.getElementById("borrowAmount").value;
            if (validateAmount(amount)) handleRequest("borrow", { amount });
        }

        function repay() {
            const amount = document.getElementById("repayAmount").value;
            if (validateAmount(amount)) handleRequest("repay", { amount });
        }

        function withdraw() {
            const amount = document.getElementById("withdrawAmount").value;
            if (validateAmount(amount)) handleRequest("withdraw", { amount });
        }

        function displayResult(result) {
            const resultDiv = document.getElementById("result");
            resultDiv.textContent = result.error ? `Error: ${result.error}` : `Status: ${result.status} (TxHash: ${result.txHash})`;
        }

        async function updateBalance() {
            try {
                const response = await fetch(`${API_URL}/balance`);
                const balanceData = await response.json();
                document.getElementById("balanceDisplay").textContent = `Balance: ${balanceData.balance} ETH`;
            } catch (error) {
                document.getElementById("balanceDisplay").textContent = "Error fetching balance";
            }
        }

        function addTransactionHistory(action, amount, txHash) {
            const historyList = document.getElementById("transactionHistory");
            const listItem = document.createElement("li");
            listItem.textContent = `${action.charAt(0).toUpperCase() + action.slice(1)} ${amount} ETH - TxHash: ${txHash}`;
            historyList.appendChild(listItem);
        }

        function validateAmount(amount) {
            if (!amount || amount <= 0) {
                displayResult({ error: "Please enter a valid amount greater than 0" });
                return false;
            }
            return true;
        }

        updateBalance();
    </script>
</body>
</html>
